{
    "componentChunkName": "component---src-templates-smell-article-template-tsx",
    "path": "/duplicated-code",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"duplicated-code\" style=\"position:relative;\"><a href=\"#duplicated-code\" aria-label=\"duplicated code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duplicated Code</h2>\n<p>Duplicated Code does not need further explanation. According to Fowler, redundant code is one of the worst smells [<a href=\"#sources\">1</a>]. One thing is that this makes it more challenging to read the program. Checking whether the copies are identical is yet another issue - looking at whether there are for sure no tiny differences between code blocks in search of <a href=\"/smells/oddball-solution\">Oddball Solution</a> further unnecessarily absorbs developer time. Yet another thing is that whenever a change is made, one needs to check if this should have happened to just one or all of the existing copies of code, wherever they are.</p>\n<h3 id=\"refactoring\" style=\"position:relative;\"><a href=\"#refactoring\" aria-label=\"refactoring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactoring:</h3>\n<ul>\n<li>Extract Class</li>\n<li>Extract Function</li>\n<li>Pull Up Method</li>\n<li>Slide Statement</li>\n<li>Form Template Method</li>\n</ul>\n<hr>\n<h5 id=\"sources\" style=\"position:relative;\"><a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sources</h5>\n<ul>\n<li>[<a href=\"#sources\">1</a>], [Origin] - Martin Fowler, <em>\"Refactoring: Improving the Design of Existing Code\"</em> (1999)</li>\n</ul>","excerpt":"Duplicated Code Duplicated Code does not need further explanation. According to Fowler, redundant code is one of the worst smells [1]. Oneâ€¦","timeToRead":1,"fields":{"slug":"/duplicated-code"},"frontmatter":{"meta":{"last_update_date":"April 19, 2022","title":"Duplicated Code","cover":"/logos/logo-text-2560x1280.png","known_as":["Clones","Code Clone","Duplicate Code","Common Methods in Sibling Class","External Duplication"]},"categories":{"obstruction":["Dispensables"],"expanse":"Within","occurrence":["Duplication"],"smell_hierarchies":["Code Smell","Design Smell","Implementation Smell"],"tags":["---"]},"relations":{"related_smells":[{"name":"Alternative Classes With Different Interfaces","slug":"alternative-classes-with-different-interfaces","type":["co-exist"]},{"name":"Oddball Solution","slug":"oddball-solution","type":["co-exist"]},{"name":"Incomplete Library Class","slug":"incomplete-library-class","type":["caused"]},{"name":"Magic Number","slug":"magic-number","type":["caused"]},{"name":"Required Setup/Teardown Code","slug":"required-setup-or-teardown-code","type":["caused"]},{"name":"Type Embedded In Name","slug":"type-embedded-in-name","type":["caused"]}]},"history":[{"author":"Martin Fowler","type":"origin","named_as":["Duplicated Code"],"regarded_as":["Code Smell"],"source":{"year":1999,"authors":["Martin Fowler","Kent Beck (contributor)","Don Roberts (contributor)"],"name":"Refactoring: Improving the Design of Existing Code","type":"book"}}]}}},"pageContext":{"slug":"/duplicated-code","title":"Duplicated Code","bottomNavigation":{"next":{"title":"Fallacious Comment","slug":"/fallacious-comment"},"previous":{"title":"Clever Code","slug":"/clever-code"}},"navbarItems":[{"title":"Clever Code","slug":"/clever-code","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Duplicated Code","slug":"/duplicated-code","categories":{"expanse":"Within","obstruction":["Dispensables"],"occurrence":["Duplication"],"smell_hierarchies":["Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Fallacious Comment","slug":"/fallacious-comment","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Linguistic Antipattern"],"tags":["---"]}},{"title":"Fallacious Method Name","slug":"/fallacious-method-name","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Implementation Smell","Linguistic Antipattern"],"tags":["---"]}},{"title":"Afraid To Fail","slug":"/afraid-to-fail","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Alternative Classes with Different Interfaces","slug":"/alternative-classes-with-different-interfaces","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Duplication"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Base Class depends on Subclass","slug":"/base-class-depends-on-subclass","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Interfaces"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell"],"tags":["---"]}},{"title":"Binary Operator in Name","slug":"/binary-operator-in-name","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Linguistic Smell"],"tags":["---"]}},{"title":"Boolean Blindness","slug":"/boolean-blindness","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Callback Hell","slug":"/callback-hell","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Combinatorial Explosion","slug":"/combinatorial-explosion","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Complicated Boolean Expression","slug":"/complicated-boolean-expression","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Complicated Regex Expression","slug":"/complicated-regex-expression","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Conditional Complexity","slug":"/conditional-complexity","categories":{"expanse":"Within","obstruction":["Object Oriented Abusers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Data Clump","slug":"/data-clump","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Dead Code","slug":"/dead-code","categories":{"expanse":"Between","obstruction":["Dispensables"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Divergent Change","slug":"/divergent-change","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Dubious Abstraction","slug":"/dubious-abstraction","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Fate over Action","slug":"/fate-over-action","categories":{"expanse":"Between","obstruction":["Couplers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Feature Envy","slug":"/feature-envy","categories":{"expanse":"Between","obstruction":["Couplers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Flag Argument","slug":"/flag-argument","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Global Data","slug":"/global-data","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Hidden Dependencies","slug":"/hidden-dependencies","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Imperative Loops","slug":"/imperative-loops","categories":{"expanse":"Within","obstruction":["Functional Abusers"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Inappropriate Static","slug":"/inappropriate-static","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Interfaces"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Incomplete Library Class","slug":"/incomplete-library-class","categories":{"expanse":"Between","obstruction":["Other"],"occurrence":["Interfaces"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Inconsistent Names","slug":"/inconsistent-names","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Inconsistent Style","slug":"/inconsistent-style","categories":{"expanse":"Between","obstruction":["Obfuscators"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Indecent Exposure","slug":"/indecent-exposure","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Insider Trading","slug":"/insider-trading","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Large Class","slug":"/large-class","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Measured Smells"],"smell_hierarchies":["Antipattern","Architecture Smell","Code Smell","Design Smell"],"tags":["Unknown"]}},{"title":"Lazy Element","slug":"/lazy-element","categories":{"expanse":"Between","obstruction":["Dispensables"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell"],"tags":["---"]}},{"title":"Long Method","slug":"/long-method","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Measured Smells"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Long Parameter List","slug":"/long-parameter-list","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Measured Smells"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Magic Number","slug":"/magic-number","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Antipattern","Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Message Chain","slug":"/message-chain","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Message Calls"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Middle Man","slug":"/middle-man","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Message Calls"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Mutable Data","slug":"/mutable-data","categories":{"expanse":"Between","obstruction":["Functional Abusers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Null Check","slug":"/null-check","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["Unknown"]}},{"title":"Obscured Intent","slug":"/obscured-intent","categories":{"expanse":"Between","obstruction":["Obfuscators"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Oddball Solution","slug":"/oddball-solution","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Duplication"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Parallel Inheritance Hierarchies","slug":"/parallel-inheritance-hierarchies","categories":{"expanse":"Between","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Primitive Obsession","slug":"/primitive-obsession","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Refused Bequest","slug":"/refused-bequest","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Interfaces"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Required Setup or Teardown Code","slug":"/required-setup-or-teardown-code","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Shotgun Surgery","slug":"/shotgun-surgery","categories":{"expanse":"Between","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Side Effects","slug":"/side-effects","categories":{"expanse":"Within","obstruction":["Functional Abusers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Special Case","slug":"/special-case","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Speculative Generality","slug":"/speculative-generality","categories":{"expanse":"Between","obstruction":["Dispensables"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell"],"tags":["---"]}},{"title":"Status Variable","slug":"/status-variable","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Temporary Field","slug":"/temporary-field","categories":{"expanse":"Within","obstruction":["Object Oriented Abusers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Tramp Data","slug":"/tramp-data","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Type Embedded in Name","slug":"/type-embedded-in-name","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Implementation Smell","Linguistic Smell"],"tags":["---"]}},{"title":"Uncommunicative Name","slug":"/uncommunicative-name","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Vertical Separation","slug":"/vertical-separation","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Measured Smells"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"\"What\" Comment","slug":"/what-comment","categories":{"expanse":"Within","obstruction":["Dispensables"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}}]}},
    "staticQueryHashes": []}