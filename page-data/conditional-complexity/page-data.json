{
    "componentChunkName": "component---src-templates-smell-article-template-tsx",
    "path": "/conditional-complexity",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"conditional-complexity\" style=\"position:relative;\"><a href=\"#conditional-complexity\" aria-label=\"conditional complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Complexity</h2>\n<p>In data-oriented programming, the usage of <code class=\"language-text\">switch</code>-like statements (lengthy, cascading <code class=\"language-text\">if</code> statements or <code class=\"language-text\">switch</code>/<code class=\"language-text\">case</code>) should be relatively rare. One such switch usually executes code scattered around the code base and should usually be replaced with a polymorphism solution.</p>\n<p>This smell was phrased initially as <em>Switch Statement</em> by Fowler and Beck back in 1999 [<a href=\"#sources\">1</a>]. One year later, Mäntylä noted that such a name is misleading since switch statements do not necessarily imply a code smell but rather just in the situation when they are used instead of a viable polymorphism solution. [<a href=\"#sources\">2</a>] Fowler, 14 years later, in his newest book in 2018, changed the name, suggesting <em>Repeated Switching</em>, agreeing that, fortuitously due to the way he initially phrased it, conditional statements got a bad reputation, while he never unconditionally opposed the existence of all <code class=\"language-text\">if</code>-s and <code class=\"language-text\">switch</code>-es. [<a href=\"#sources\">3</a>] In the \"Clean Code\" by Robert Martin, the smell was called \"Prefer Polymorphism to if/else or switch/case\", which is lengthy, but it hits the nail on the head. [<a href=\"#sources\">4</a>]</p>\n<p>I provide a typical example of this issue on an <code class=\"language-text\">Exporter</code> class with different file formats. A new <code class=\"language-text\">elif</code> has been added for each new feature instead of using an Object-Oriented solution like the Factory Method.</p>\n<p>Keeping a class focused on a single concern is vital to make it more robust. Martin Fowler defines responsibility as a reason to change, concluding that “A class should have only one reason to change.” [<a href=\"#sources\">3</a>]. An example that violates this would be a class that prints a table that handles both the contents of the cells and the styling of the table.</p>\n<p>Another situation, which is not explicitly mentioned in the sources, would be a nested <code class=\"language-text\">Try</code> and <code class=\"language-text\">Except</code>/<code class=\"language-text\">Catch</code> \"checklist\", where numerous error-catching blocks are used instead of one generalized for the situation at hand.</p>\n<h3 id=\"causation\" style=\"position:relative;\"><a href=\"#causation\" aria-label=\"causation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Causation</h3>\n<p>The most common way such a smell can be created is when a conditional switch behavior is used instead of creating a new class. The first time it happens is not yet a \"scent-ish\" smell, but this immediately becomes a saturated red flag as soon as it is done the second time [<a href=\"#sources\">5</a>]. Logic blocks grew over time more extensive, and no one bothered to implement an Object-Oriented Programming style alternative like decorator, strategy, or state. It was easier to add another <code class=\"language-text\">else if</code>.</p>\n<h3 id=\"problems\" style=\"position:relative;\"><a href=\"#problems\" aria-label=\"problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problems</h3>\n<h4 id=\"open-closed-principle-violation\" style=\"position:relative;\"><a href=\"#open-closed-principle-violation\" aria-label=\"open closed principle violation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Open-Closed Principle Violation</strong></h4>\n<p>The class should be open for extension but closed for modification</p>\n<h4 id=\"more-complex-apis\" style=\"position:relative;\"><a href=\"#more-complex-apis\" aria-label=\"more complex apis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>More Complex APIs</strong></h4>\n<h4 id=\"comprehensibility\" style=\"position:relative;\"><a href=\"#comprehensibility\" aria-label=\"comprehensibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Comprehensibility</strong></h4>\n<p>If statement blocks make things harder to understand as they require to think about all the possible paths the logic can go.</p>\n<h4 id=\"unnecessary-indirection\" style=\"position:relative;\"><a href=\"#unnecessary-indirection\" aria-label=\"unnecessary indirection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Unnecessary Indirection</strong></h4>\n<p>Most likely, there is a way to execute one method on a polymorphic class instead of switching cases.</p>\n<h4 id=\"increased-test-complexity\" style=\"position:relative;\"><a href=\"#increased-test-complexity\" aria-label=\"increased test complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Increased Test Complexity</strong></h4>\n<p>Each subsequent if branch needs each subsequent test.</p>\n<h3 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h3>\n<div class=\"example-block\">\n<h4 id=\"smelly\" style=\"position:relative;\"><a href=\"#smelly\" aria-label=\"smelly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Smelly</h4>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Exporter</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">export</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> export_format<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> export_format <span class=\"token operator\">==</span> <span class=\"token string\">'wav'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>exportInWav<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> export_format <span class=\"token operator\">==</span> <span class=\"token string\">'flac'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>exportInFlac<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> export_format <span class=\"token operator\">==</span> <span class=\"token string\">'mp3'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>exportInMp3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> export_format <span class=\"token operator\">==</span> <span class=\"token string\">'ogg'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>exportInOgg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h4>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Exporter</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">export</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> export_format<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        exporter <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_format_factory<span class=\"token punctuation\">(</span>export_format<span class=\"token punctuation\">)</span>\n        exporter<span class=\"token punctuation\">.</span>export<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_format_factory</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> export_format<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> export_format <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>export_format_factories<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> render_factory<span class=\"token punctuation\">[</span>export_format<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">raise</span> MissingFormatException\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n</div>\n<h3 id=\"refactoring\" style=\"position:relative;\"><a href=\"#refactoring\" aria-label=\"refactoring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactoring:</h3>\n<ul>\n<li>Use a Guard Clause</li>\n<li>Extract Conditional</li>\n<li>Replace with Polymorphism</li>\n<li>Use Strategy Pattern</li>\n<li>Use Null Object</li>\n<li>Use Functional Programming Based Solution</li>\n</ul>\n<hr>\n<h5 id=\"sources\" style=\"position:relative;\"><a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sources</h5>\n<ul>\n<li>[<a href=\"#sources\">1</a>], [Parentage] - Martin Fowler, <em>\"Refactoring: Improving the Design of Existing Code\"</em> (1999)</li>\n<li>[<a href=\"#sources\">2</a>] - Mika Mäntylä, <em>\"Bad Smells in Software - a Taxonomy and an Empirical Study\"</em> (2003)</li>\n<li>[<a href=\"#sources\">3</a>] - Martin Fowler, <em>\"Refactoring: Improving the Design of Existing Code (3rd Edition)\"</em> (2018)</li>\n<li>[<a href=\"#sources\">4</a>] - Robert Martin, <em>\"Clean Code: A Handbook of Agile Software Craftsmanship\"</em> (2008)</li>\n<li>[<a href=\"#sources\">5</a>] - William C. Wake, <em>\"Refactoring Workbook\"</em> (2004)</li>\n<li>[Origin] - Steve Smith, <em>\"Refactoring Fundamentals\"</em> (2013)</li>\n</ul>","excerpt":"Conditional Complexity In data-oriented programming, the usage of -like statements (lengthy, cascading  statements or /) should be…","timeToRead":3,"fields":{"slug":"/conditional-complexity"},"frontmatter":{"meta":{"last_update_date":"April 19, 2022","title":"Conditional Complexity","cover":"/logos/logo-text-2560x1280.png","known_as":["Repeated Switching","Switch Statement","Conditional Complexity","Prefer Polymorphism to if/else or switch/case"]},"categories":{"obstruction":["Object Oriented Abusers"],"expanse":"Within","occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Design Smell","Implementation Smell"],"tags":["---"]},"relations":{"related_smells":[{"name":"Callback Hell","slug":"callback-hell","type":["family"]},{"name":"Combinatorial Explosion","slug":"combinatorial-explosion","type":["family"]},{"name":"Flag Arguments","slug":"flag-argument","type":["caused"]},{"name":"Loops","slug":"imperative-loops","type":["caused"]},{"name":"Null Check","slug":"null-check","type":["caused"]},{"name":"Long Parameter List","slug":"long-parameter-list","type":["caused"]}]},"history":[{"author":"Steve Smith","type":"origin","named_as":["Conditional Complexity"],"regarded_as":["Code Smell"],"source":{"year":2013,"authors":["Steve Smith"],"name":"Refactoring Fundamentals","type":"course"}},{"author":"Martin Fowler","type":"update","named_as":["Repeated Switching"],"regarded_as":["Code Smell"],"source":{"year":2018,"authors":["Martin Fowler"],"name":"Refactoring: Improving the Design of Existing Code (3rd Edition)","type":"book"}},{"author":"Martin Fowler","type":"parentage","named_as":["Switch Statement"],"regarded_as":["Code Smell"],"source":{"year":1999,"authors":["Martin Fowler","Kent Beck (contributor)","Don Roberts (contributor)"],"name":"Refactoring: Improving the Design of Existing Code","type":"book"}}]}}},"pageContext":{"slug":"/conditional-complexity","title":"Conditional Complexity","bottomNavigation":{"next":{"title":"Data Clump","slug":"/data-clump"},"previous":{"title":"Complicated Regex Expression","slug":"/complicated-regex-expression"}},"navbarItems":[{"title":"Clever Code","slug":"/clever-code","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Duplicated Code","slug":"/duplicated-code","categories":{"expanse":"Within","obstruction":["Dispensables"],"occurrence":["Duplication"],"smell_hierarchies":["Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Fallacious Comment","slug":"/fallacious-comment","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Linguistic Antipattern"],"tags":["---"]}},{"title":"Fallacious Method Name","slug":"/fallacious-method-name","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Implementation Smell","Linguistic Antipattern"],"tags":["---"]}},{"title":"Afraid To Fail","slug":"/afraid-to-fail","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Alternative Classes with Different Interfaces","slug":"/alternative-classes-with-different-interfaces","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Duplication"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Base Class depends on Subclass","slug":"/base-class-depends-on-subclass","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Interfaces"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell"],"tags":["---"]}},{"title":"Binary Operator in Name","slug":"/binary-operator-in-name","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Linguistic Smell"],"tags":["---"]}},{"title":"Boolean Blindness","slug":"/boolean-blindness","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Callback Hell","slug":"/callback-hell","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Combinatorial Explosion","slug":"/combinatorial-explosion","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Complicated Boolean Expression","slug":"/complicated-boolean-expression","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Complicated Regex Expression","slug":"/complicated-regex-expression","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Conditional Complexity","slug":"/conditional-complexity","categories":{"expanse":"Within","obstruction":["Object Oriented Abusers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Data Clump","slug":"/data-clump","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Dead Code","slug":"/dead-code","categories":{"expanse":"Between","obstruction":["Dispensables"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Divergent Change","slug":"/divergent-change","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Dubious Abstraction","slug":"/dubious-abstraction","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Fate over Action","slug":"/fate-over-action","categories":{"expanse":"Between","obstruction":["Couplers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Feature Envy","slug":"/feature-envy","categories":{"expanse":"Between","obstruction":["Couplers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Flag Argument","slug":"/flag-argument","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Global Data","slug":"/global-data","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Hidden Dependencies","slug":"/hidden-dependencies","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Imperative Loops","slug":"/imperative-loops","categories":{"expanse":"Within","obstruction":["Functional Abusers"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Inappropriate Static","slug":"/inappropriate-static","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Interfaces"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Incomplete Library Class","slug":"/incomplete-library-class","categories":{"expanse":"Between","obstruction":["Other"],"occurrence":["Interfaces"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Inconsistent Names","slug":"/inconsistent-names","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Inconsistent Style","slug":"/inconsistent-style","categories":{"expanse":"Between","obstruction":["Obfuscators"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Indecent Exposure","slug":"/indecent-exposure","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Insider Trading","slug":"/insider-trading","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Large Class","slug":"/large-class","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Measured Smells"],"smell_hierarchies":["Antipattern","Architecture Smell","Code Smell","Design Smell"],"tags":["Unknown"]}},{"title":"Lazy Element","slug":"/lazy-element","categories":{"expanse":"Between","obstruction":["Dispensables"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell"],"tags":["---"]}},{"title":"Long Method","slug":"/long-method","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Measured Smells"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Long Parameter List","slug":"/long-parameter-list","categories":{"expanse":"Within","obstruction":["Bloaters"],"occurrence":["Measured Smells"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell","Implementation Smell"],"tags":["---"]}},{"title":"Magic Number","slug":"/magic-number","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Antipattern","Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Message Chain","slug":"/message-chain","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Message Calls"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Middle Man","slug":"/middle-man","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Message Calls"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Mutable Data","slug":"/mutable-data","categories":{"expanse":"Between","obstruction":["Functional Abusers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Null Check","slug":"/null-check","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["Unknown"]}},{"title":"Obscured Intent","slug":"/obscured-intent","categories":{"expanse":"Between","obstruction":["Obfuscators"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Oddball Solution","slug":"/oddball-solution","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Duplication"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Parallel Inheritance Hierarchies","slug":"/parallel-inheritance-hierarchies","categories":{"expanse":"Between","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Primitive Obsession","slug":"/primitive-obsession","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Refused Bequest","slug":"/refused-bequest","categories":{"expanse":"Between","obstruction":["Object Oriented Abusers"],"occurrence":["Interfaces"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Required Setup or Teardown Code","slug":"/required-setup-or-teardown-code","categories":{"expanse":"Between","obstruction":["Bloaters"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Shotgun Surgery","slug":"/shotgun-surgery","categories":{"expanse":"Between","obstruction":["Change Preventers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Side Effects","slug":"/side-effects","categories":{"expanse":"Within","obstruction":["Functional Abusers"],"occurrence":["Responsibility"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Special Case","slug":"/special-case","categories":{"expanse":"Within","obstruction":["Change Preventers"],"occurrence":["Conditional Logic"],"smell_hierarchies":["Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Speculative Generality","slug":"/speculative-generality","categories":{"expanse":"Between","obstruction":["Dispensables"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Antipattern","Code Smell","Design Smell"],"tags":["---"]}},{"title":"Status Variable","slug":"/status-variable","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Unnecessary Complexity"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Temporary Field","slug":"/temporary-field","categories":{"expanse":"Within","obstruction":["Object Oriented Abusers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"Tramp Data","slug":"/tramp-data","categories":{"expanse":"Between","obstruction":["Data Dealers"],"occurrence":["Data"],"smell_hierarchies":["Code Smell","Design Smell"],"tags":["---"]}},{"title":"Type Embedded in Name","slug":"/type-embedded-in-name","categories":{"expanse":"Within","obstruction":["Couplers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Implementation Smell","Linguistic Smell"],"tags":["---"]}},{"title":"Uncommunicative Name","slug":"/uncommunicative-name","categories":{"expanse":"Within","obstruction":["Lexical Abusers"],"occurrence":["Names"],"smell_hierarchies":["Code Smell","Implementation Smell"],"tags":["---"]}},{"title":"Vertical Separation","slug":"/vertical-separation","categories":{"expanse":"Within","obstruction":["Obfuscators"],"occurrence":["Measured Smells"],"smell_hierarchies":["Code Smell"],"tags":["---"]}},{"title":"\"What\" Comment","slug":"/what-comment","categories":{"expanse":"Within","obstruction":["Dispensables"],"occurrence":["Names"],"smell_hierarchies":["Code Smell"],"tags":["---"]}}]}},
    "staticQueryHashes": []}